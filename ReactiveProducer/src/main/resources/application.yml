spring:
#  kafka:
#    consumer:
#      bootstrap-servers: localhost:29092
#      group-id: group-tenant1-id
#      auto-offset-reset: earliest
#      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#    producer:
#      bootstrap-servers: localhost:29092
#      key-serializer: org.apache.kafka.common.serialization.StringSerializer
#      value-serializer: org.apache.kafka.common.serialization.StringSerializer
  application:
    name: ReactiveProducer
  cloud:
    stream:
      kafka:
        binder:
          brokers: ${KAFKA_URL:http://localhost:29092,http://localhost:29093}
          producer-properties:
            key.serializer: org.apache.kafka.common.serialization.ByteArraySerializer
            value.serializer: org.apache.kafka.common.serialization.ByteArraySerializer
          consumer-properties:
            key.deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
            value.deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
      bindings:
        consumeString-in-0:
          destination: testTopic
          contentType: application/json
        stringSupplier-out-0:
          destination: testTopic
          contentType: application/json
          producer:
            partition-count: 5
            partitionKeyExpression: headers['partitionKey']
#            partition-key-extractor-name: getPartitionKeyExtractorStrategy
    function:
      definition: stringSupplier


